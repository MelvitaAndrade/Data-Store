default:
  image: $CI_REGISTRY/cimpress-technology/mis/gang-studio/infra/docker-images/node-image-with-python
  tags:
    - mis
    - linux

variables:
  APP_NAME: 'Data-Store'
  JOB_INFO: '$CI_REGISTRY/cimpress-technology/mis/gang-studio/layouts/apis/data-store/data-store:$CI_COMMIT_TAG'
  APPLICATION_TYPE: 'api'
  VERSION: $CI_COMMIT_TAG

stages:
  - release
  - install
  - test
  - lint
  - build
  - deploy

include:
  - template: Code-Quality.gitlab-ci.yml

installation:
  stage: install
  script:
    - npm install
  only:
    - merge_requests
    - tags
  artifacts:
    paths:
      - node_modules/

unit_testing:
  stage: test
  script:
    - npm run test:ci -- --coverage --coverageReporters json-summary
  artifacts:
    reports:
      junit: junit.xml
    paths:
      - coverage/
  only:
    - merge_requests
    - tags
  dependencies:
    - installation

e2e_testing:
  image: node:lts
  stage: test
  script:
    - npm run test:e2e
  after_script:
    - mv junit.xml junit-e2e.xml
  artifacts:
    reports:
      junit: junit-e2e.xml
  only:
    - merge_requests
    - tags
  dependencies:
    - installation

code_quality:
  stage: test
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_TAG
  after_script:
    - cp gl-code-quality-report.json code-quality-report.json
  needs:
    - job: installation
  artifacts:
    paths: [code-quality-report.json]
    reports:
      codequality: gl-code-quality-report.json

eslint:
  stage: lint
  needs:
    - job: code_quality
  script:
    - apk add jq
    - npm install eslint-formatter-gitlab
    - npm run lint -- --format gitlab
    - mv gl-code-quality-report.json eslint-report.json
    - jq -s '[.[][]]' code-quality-report.json eslint-report.json > gl-code-quality-report.json
  only:
    - merge_requests
    - tags
  artifacts:
    reports:
      codequality: gl-code-quality-report.json

build:
  image: vistaprintufi/docker-aws-build
  stage: build
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $JOB_INFO .
    - docker push $JOB_INFO
  only:
    - tags
  tags:
    - gang-studio

pages:
  stage: deploy
  script:
    - npm run docs:ci
  dependencies:
    - unit_testing
    - installation
  artifacts:
    paths:
      - public
    expire_in: 1 day
  only:
    - tags

semantic_release:
  image: node:lts
  stage: release
  script:
    - export HUSKY=0
    - npm install semantic-release @semantic-release/git @semantic-release/gitlab @semantic-release/npm  @semantic-release/changelog -g
    - npx semantic-release
  only:
    - main
  except:
    changes:
      - CHANGELOG.md

development_deployment:
  stage: deploy
  variables:
    ENVIRONMENT: 'development'
  trigger:
    project: Cimpress-Technology/MIS/gang-studio/infra/base-infrastructure
  only:
    - tags

staging_deployment:
  stage: deploy
  variables:
    ENVIRONMENT: 'stage'
  trigger:
    project: Cimpress-Technology/MIS/gang-studio/infra/base-infrastructure
  only:
    - tags
  when: manual
  needs:
    - development_deployment

production_deployment:
  stage: deploy
  variables:
    ENVIRONMENT: 'production'
  trigger:
    project: Cimpress-Technology/MIS/gang-studio/infra/base-infrastructure
  only:
    - tags
  when: manual
  needs:
    - staging_deployment
